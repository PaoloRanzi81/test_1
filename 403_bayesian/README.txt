PROJECT NAME: '403_analysis_hierachical_bayesian_logistic_regression'
AUTHOR: Paolo Ranzi
README FILE VERSION (LAST UPDATE): 20210208


Python 3.8.5 has been used. For each step the specific Python script has been mentioned, accordingly. At the begginning of EACH script we have to make sure of setting custom-made parameters/pieces of information: 
- import Python libraries (if you do not have a specific library you have to manually install it by using PIP within your virtual environment);  
- setting paths and keywords according to your storage location;

P.S. 1: all scripts have been optimized for using them by parallel computing. It runs multi-threading (by using all vCPUs available + 1 GPU) when writing 'production' in the run_modality.csv input. Instead, it runs single-threading when writing 'testing' in the run_modality.csv input.
P.S. 2: all .csv files used as inputs can be substituted by URLs. All inputs are stored in the 'input' folder; 


PYTHON SCRIPTS:
 

01. MASTER: IT IS THE MASTER SCRIPT:
The script runs all the scripts below in sequence (i.e. one after the other). You have just to run this script for running the other ones: 
SCRIPT NAME: '403_bayesian_hbm_train_master_script.py'
INPUT: n/a; 
OUTPUT: n/a; 


02. SLAVE: IT RUNS THE TRAINING ON TRAIN-SET:
It runs the training by using a hierachical bayesian logistic regression. This is the time-consuming training step: 
SCRIPT NAME: 'bayesian_hbm_403_01_training.py'
INPUT: 
- 1 .csv file with users' data ('user_activities_data_set_train.csv');
- 1 .csv file ('dictionary_variants_id.csv') for indicating the variant_id (e.g 'SBJahOi2V0o') and variant_description (e.g. 'control') etc.; 
- 1 .csv file ('selected_variables.csv') for selecting the variable to be fed into the statistical analysis. Default are the following 6 variables: (event_action,
event_label, experiment_audience_type, browser, city, device_type);
- 1 .csv file ('run_modality.csv') for choosing the running modality, either: 
'testing' --> quick without hyperparameter tuning/training; 
'production' --> slow with hyperparameter tuning/training;
OUTPUT: 
- 2 .csv files with the updated variables' names to be used later for the feature importance plotting ('403_analysis_feature_name_list.csv' + '403_columns_names.csv'); 
- 1 .csv file showing the specific model version had been used for generating the results (it is enough to copy the current folder name) ('403_tracking_model_version.csv');
- 1 .csv with the runtime speed ('403_total_training_time.csv'); 
- 1 .joblib file with the stored bayesian model ('403_analysis_trace_model.joblib');
- 1 .h5 file with the stored MCMC traces ('403_analysis_trace.h5');


03. SLAVE: IT PLOTS THE FEATURE IMPORTANCE FOR THE STATISTICAL MODEL:
SCRIPT NAME: 'bayesian_hbm_403_02_plot_feat_imp.py'
INPUT: 
- 1 .joblib file ('403_analysis_trace_model.joblib') generated by 'bayesian_hbm_403_01_training.py';
OUTPUT: 
- 1. .csv file with the summary statistics for the bayesian model used ('403_bayesian_summary_statistics.csv');
- DEPRECATED: 1 .pdf file ('403_analysis_feature_importance.pdf') with the simplified feature importance by Seaborn; 
- 1 .csv file with the raw data that have been fed to Seaborn for the aforementioned plot ('403_feature_importance_raw_data.csv'); 
- 1 .pdf file ('403_analysis_feature_importance_boxplot.pdf') with an alternative version of the Bayesian forest plot by Seaborn; 
- 1 .csv file with the raw data that have been fed to Seaborn for the aforementioned plot ('403_feature_importance_boxplot.csv'); 
- 1 .pdf file ('403_analysis_feature_importance_arviz_original.pdf') with the original Bayesian forest plot by Arviz. For interpreting the meaning for "beta_tmp[0,1]" etc., please check the file '403_feature_importance_raw_data.csv'; 
- 1 .csv file with the absolute value of the variable's coefficients ('403_feature_importance_absolute_value.csv');
- 1 .md file ('403_feat_imp_interpretation.md') with the automated interpretation of the forest plot in plain English by using a Markdown format; 


04. MASTER: THE TEST MASTER SCRIPT:
The script runs script below: 
SCRIPT NAME: '403_bayesian_hbm_test_master_script.py'
INPUT: n/a; 
OUTPUT: n/a; 


05. SLAVE: IT LOADS THE TRAINED STATISTICAL MODEL AND COMPUTE PREDICTIONS ON TEST-SET:
SCRIPT NAME: 'bayesian_hbm_403_03_mcc_score.py'
INPUT:
- 1 .csv file with users' data ('user_activities_data_set_test.csv');
- 1. joblib file with the stored bayesian model ('403_analysis_trace_model.joblib') generated by 'bayesian_hbm_403_01_training.py';  
- 1 .h5 file with the stored MCMC traces ('403_analysis_trace.h5') generated by 'bayesian_hbm_403_01_training.py';  
OUTPUT: 
- it prints the metrics (MCC score + precision + recall + accuracy). It stores them into a .csv file ('403_analysis_mcc_score.csv'); 







